% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/types.R
\name{ts_recursive_list}
\alias{ts_recursive_list}
\title{Recursive list}
\usage{
ts_recursive_list(values, recur)
}
\arguments{
\item{values}{properties that define the base schema of the list;
must be a named list.}

\item{recur}{a named list of properties that are added.
These can use the 'ts_self()' helper.}
}
\value{
A ts object that accepts recursive lists.
}
\description{
For complex recursive lists. These are objects that can contain subcomponents
of the same (parent) type.
e.g., Person can have name, dob, properties, and 'children' which is an
(optional) array of Person objects.
}
\details{
Defining this type in Zod is currently complicated, as the type has to be
pre-defined, and then extended after manually defining the Type. In an
upcoming version of zod 4, this should be simplified. For now, it's tricky.
}
\examples{
r_list <- ts_recursive_list(
    list(name = ts_character(1)),
    list(children = ts_self())
)
}
